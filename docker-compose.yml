version: '3'
services:

  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: ["/venv/bin/celery", "-A", "config", "worker", "--concurrency=10", "--loglevel=debug"]
    depends_on:
      - db
      - redis
    env_file:
      - .env
    profiles:
      - celery
    volumes:
      - .:/code

  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: ["/venv/bin/celery", "-A", "config", "beat", "--loglevel=debug"]
    depends_on:
      - db
      - redis
    env_file:
      - .env
    profiles:
      - celery
    volumes:
      - .:/code

  db:
    image: postgres:12.0
    environment:
      - "POSTGRES_HOST_AUTH_METHOD=trust"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "--host=db", "--username=postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    user: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data/

  # flower:
  #   build: ./
  #   command: python -m flower -A tasks
  #   volumes:
  #     - redis_data:/data
  #   working_dir: /data
  #   ports:
  #     - 5555:5555
  #   env_file:
  #     - .env

  maildev:
    image: maildev/maildev
    ports:
      - "1025:25"
      - "1080:80"

  redis:
    image: "redis:alpine"
    expose:
      - "6379"
    volumes:
      - redis-data:/data

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: ["/bin/bash", "/code/compose-start.sh"]
    image: ksvotes:v3ksvotesorg-web
    depends_on:
      - db
      - maildev
      - redis
    env_file:
      - .env
    # init: true
    ports:
      - "8000:8000"

volumes:
  postgres-data:
  redis-data:
